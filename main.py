import json
import re
import os
import datetime
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
NOMENCLATURE_FILE = 'nomenclature.json'
CHUNK_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤ MarkdownV2."""
    return text.replace('*', r'\*') \
               .replace('_', r'\_') \
               .replace('`', r'\`') \
               .replace('[', r'\[') \
               .replace(']', r'\]') \
               .replace('(', r'\(') \
               .replace(')', r'\)') \
               .replace('~', r'\~') \
               .replace('>', r'\>') \
               .replace('#', r'\#') \
               .replace('+', r'\+') \
               .replace('=', r'\=') \
               .replace('|', r'\|') \
               .replace('{', r'\{') \
               .replace('}', r'\}') \
               .replace('!', r'\!')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def log_user_action(user_id, action, message_text):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logging.info(f"[{timestamp}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ '{action}': {message_text}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
def load_nomenclature():
    try:
        with open(NOMENCLATURE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞.")
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤ —Ñ–∞–π–ª
def save_nomenclature(nomenclature):
    with open(NOMENCLATURE_FILE, 'w', encoding='utf-8') as f:
        json.dump(nomenclature, f, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update.effective_user.id, "/start", update.message.text)
    await update.message.reply_text("–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ö–æ–¥ –∏–ª–∏ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –ê—Ä—Ç–∏–∫—É–ª\n"
                                    "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
                                    "/add [–ö–æ–¥] [–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ] [–ê—Ä—Ç–∏–∫—É–ª] ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é\n"
                                    "/list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π\n"
                                    "/delete [–ö–æ–¥] ‚Äì —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
                                    "/help ‚Äì –ø–æ–º–æ—â—å\n"
                                    "/import ‚Äì –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ .txt")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äì –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/add [–ö–æ–¥] [–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ] [–ê—Ä—Ç–∏–∫—É–ª] ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
/list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
/delete [–ö–æ–¥] ‚Äì —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
/help ‚Äì —ç—Ç–∞ –ø–æ–º–æ—â—å
/import ‚Äì –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ .txt
"""
    await update.message.reply_text(help_text)
    log_user_action(update.effective_user.id, "help", update.message.text)

# –ö–æ–º–∞–Ω–¥–∞ /import
async def import_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update.effective_user.id, "import", update.message.text)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ .txt —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (.txt)
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document.file_name.endswith('.txt'):
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .txt")
        return

    new_file = await document.get_file()
    file_path = f"temp_{document.file_id}.txt"
    await new_file.download_to_drive(file_path)

    with open(file_path, 'r', encoding='utf-8') as f:
        lines = [line.strip() for line in f if line.strip()]

    nomenclature = []
    for line in lines:
        parts = line.split(' ', 3)
        if len(parts) < 4:
            continue
        code = parts[0]
        name = parts[1]
        article = parts[3]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
        if not code.isdigit():
            logging.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–¥–æ–º: {line}")
            continue

        nomenclature.append({'code': code, 'name': name, 'article': article})

    save_nomenclature(nomenclature)
    await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(file_path)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    log_user_action(update.effective_user.id, "import", update.message.text)

# –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–ø–æ –∫–æ–¥—É, –∞—Ä—Ç–∏–∫—É–ª—É, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é)
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    nomenclature = load_nomenclature()

    results = []
    for item in nomenclature:
        if (query == item['code'] or 
            query.lower() in item['name'].lower() or 
            query.lower() in item['article'].lower()):
            results.append(item)

    if not results:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    message_chunks = []
    for i in range(0, len(results), CHUNK_SIZE):
        chunk = results[i:i+CHUNK_SIZE]
        chunk_message = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —è –Ω–∞—à–µ–ª, —ç—Ç–æ:\n\n"
        for result in chunk:
            chunk_message += (
                f"üîπ –ö–æ–¥: {result['code']}\n"
                f"üîπ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {escape_markdown(result['name'])}\n"
                f"üîπ –ê—Ä—Ç–∏–∫—É–ª: {result['article']}\n\n"
            )
        message_chunks.append(chunk_message)

    for chunk in message_chunks:
        try:
            await update.message.reply_text(chunk, parse_mode='MarkdownV2')
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Markdown: {e}")
            await update.message.reply_text(chunk)
    log_user_action(update.effective_user.id, "search", query)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = update.message.text.strip().split(' ', 3)
    if len(parts) < 4 or parts[0] != '/add':
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add [–ö–æ–¥] [–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ] [–ê—Ä—Ç–∏–∫—É–ª]")
        return

    code = parts[1]
    name = parts[2]
    article = parts[3]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    if not code.isdigit():
        await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return

    if len(code) < 5:
        await update.message.reply_text("‚ùå –ö–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
    if not re.match(r'^[\w\-]+$', article):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Ä—Ç–∏–∫—É–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã.")
        return

    nomenclature = load_nomenclature()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    for item in nomenclature:
        if item['code'] == code:
            await update.message.reply_text(f"‚ùå –ó–∞–ø–∏—Å—å —Å –∫–æ–¥–æ–º `{code}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

    nomenclature.append({'code': code, 'name': name, 'article': article})
    save_nomenclature(nomenclature)

    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    log_user_action(update.effective_user.id, "add", update.message.text)

# –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 10 –∑–∞–ø–∏—Å–µ–π
async def list_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nomenclature = load_nomenclature()
    if not nomenclature:
        await update.message.reply_text("‚ùå –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞.")
        return

    message = "üìã –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π:\n\n"
    for item in nomenclature[:10]:
        message += (
            f"üîπ –ö–æ–¥: {item['code']}\n"
            f"üîπ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {escape_markdown(item['name'])}\n"
            f"üîπ –ê—Ä—Ç–∏–∫—É–ª: {item['article']}\n\n"
        )

    try:
        await update.message.reply_text(message, parse_mode='MarkdownV2')
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Markdown: {e}")
        await update.message.reply_text(message)
    log_user_action(update.effective_user.id, "list", update.message.text)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–æ–¥—É
async def delete_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = update.message.text.strip().split(' ')
    if len(parts) < 2 or parts[0] != '/delete':
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete [–ö–æ–¥]")
        return

    code_to_delete = parts[1]
    nomenclature = load_nomenclature()

    found = False
    new_nomenclature = []
    for item in nomenclature:
        if item['code'] == code_to_delete:
            found = True
        else:
            new_nomenclature.append(item)

    if found:
        save_nomenclature(new_nomenclature)
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å —Å –∫–æ–¥–æ–º `{code_to_delete}` —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text(f"‚ùå –ó–∞–ø–∏—Å—å —Å –∫–æ–¥–æ–º `{code_to_delete}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    log_user_action(update.effective_user.id, "delete", update.message.text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update.effective_user.id, "unknown", update.message.text)
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏.")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token("7119996029:AAGJn6MrE5bAb0MYbrQkG7C9e5-ugsAUwH4").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", list_items))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("import", import_command))
    application.add_handler(MessageHandler(filters.Regex(r'^/delete '), delete_item))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))
    application.add_handler(MessageHandler(filters.Regex(r'^/add '), add_item))
    application.add_handler(MessageHandler(filters.Document.TEXT, handle_document))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    application.run_polling()

if __name__ == "__main__":
    main()

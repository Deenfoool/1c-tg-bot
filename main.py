import json
import re
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
NOMENCLATURE_FILE = 'nomenclature.json'
CHUNK_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤ MarkdownV2."""
    return text.replace('*', r'\*') \
               .replace('_', r'\_') \
               .replace('`', r'\`') \
               .replace('[', r'\[') \
               .replace(']', r'\]') \
               .replace('(', r'\(') \
               .replace(')', r'\)') \
               .replace('~', r'\~') \
               .replace('>', r'\>') \
               .replace('#', r'\#') \
               .replace('+', r'\+') \
               .replace('=', r'\=') \
               .replace('|', r'\|') \
               .replace('{', r'\{') \
               .replace('}', r'\}') \
               .replace('!', r'\!')

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
def load_nomenclature():
    try:
        with open(NOMENCLATURE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞.")
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –≤ —Ñ–∞–π–ª
def save_nomenclature(nomenclature):
    with open(NOMENCLATURE_FILE, 'w', encoding='utf-8') as f:
        json.dump(nomenclature, f, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ö–æ–¥ –∏–ª–∏ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –ê—Ä—Ç–∏–∫—É–ª\n"
                                    "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
                                    "/add [–ö–æ–¥] [–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ] [–ê—Ä—Ç–∏–∫—É–ª] - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é\n"
                                    "/list - –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π\n"
                                    "/delete [–ö–æ–¥] - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")

# –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–ø–æ –∫–æ–¥—É, –∞—Ä—Ç–∏–∫—É–ª—É, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é)
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    nomenclature = load_nomenclature()

    results = []
    for item in nomenclature:
        if (query == item['code'] or 
            query.lower() in item['name'].lower() or 
            query.lower() in item['article'].lower()):
            results.append(item)

    if not results:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    message_chunks = []
    for i in range(0, len(results), CHUNK_SIZE):
        chunk = results[i:i+CHUNK_SIZE]
        chunk_message = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —è –Ω–∞—à–µ–ª, —ç—Ç–æ:\n\n"
        for result in chunk:
            chunk_message += (
                f"üîπ *–ö–æ–¥:* `{result['code']}`\n"
                f"üîπ *–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {escape_markdown(result['name'])}\n"
                f"üîπ *–ê—Ä—Ç–∏–∫—É–ª:* `{result['article']}`\n\n"
            )
        message_chunks.append(chunk_message)

    for chunk in message_chunks:
        try:
            await update.message.reply_text(chunk, parse_mode='MarkdownV2')
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Markdown: {e}")
            await update.message.reply_text(chunk)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = update.message.text.strip().split(' ', 3)
    if len(parts) < 4 or parts[0] != '/add':
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add [–ö–æ–¥] [–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ] [–ê—Ä—Ç–∏–∫—É–ª]")
        return

    code = parts[1]
    name = parts[2]
    article = parts[3]

    nomenclature = load_nomenclature()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –∫–æ–¥—É
    for item in nomenclature:
        if item['code'] == code:
            await update.message.reply_text(f"‚ùå –ó–∞–ø–∏—Å—å —Å –∫–æ–¥–æ–º `{code}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

    nomenclature.append({'code': code, 'name': name, 'article': article})
    save_nomenclature(nomenclature)

    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

# –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 10 –∑–∞–ø–∏—Å–µ–π
async def list_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nomenclature = load_nomenclature()
    if not nomenclature:
        await update.message.reply_text("‚ùå –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞.")
        return

    message = "üìã –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π:\n\n"
    for item in nomenclature[:10]:
        message += (
            f"üîπ –ö–æ–¥: {item['code']}\n"
            f"üîπ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {escape_markdown(item['name'])}\n"
            f"üîπ –ê—Ä—Ç–∏–∫—É–ª: {item['article']}\n\n"
        )

    try:
        await update.message.reply_text(message, parse_mode='MarkdownV2')
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Markdown: {e}")
        await update.message.reply_text(message)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–æ–¥—É
async def delete_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = update.message.text.strip().split(' ')
    if len(parts) < 2 or parts[0] != '/delete':
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete [–ö–æ–¥]")
        return

    code_to_delete = parts[1]
    nomenclature = load_nomenclature()

    found = False
    new_nomenclature = []
    for item in nomenclature:
        if item['code'] == code_to_delete:
            found = True
        else:
            new_nomenclature.append(item)

    if found:
        save_nomenclature(new_nomenclature)
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å —Å –∫–æ–¥–æ–º `{code_to_delete}` —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text(f"‚ùå –ó–∞–ø–∏—Å—å —Å –∫–æ–¥–æ–º `{code_to_delete}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token("7119996029:AAGJn6MrE5bAb0MYbrQkG7C9e5-ugsAUwH4").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", list_items))
    application.add_handler(MessageHandler(filters.Regex(r'^/delete '), delete_item))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))
    application.add_handler(MessageHandler(filters.Regex(r'^/add '), add_item))

    application.run_polling()

if __name__ == "__main__":
    main()

import os
import json
import re
import datetime
import logging
from dotenv import load_dotenv
from telegram import (
    Message,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
import asyncio

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
NOMENCLATURE_FILE = 'nomenclature.json'
CHUNK_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
def escape_markdown(text):
    return text.replace('*', r'\*') \
               .replace('_', r'\_') \
               .replace('`', r'\`') \
               .replace('[', r'\[') \
               .replace(']', r'\]') \
               .replace('(', r'\(') \
               .replace(')', r'\)') \
               .replace('~', r'\~') \
               .replace('>', r'\>') \
               .replace('#', r'\#') \
               .replace('+', r'\+') \
               .replace('=', r'\=') \
               .replace('|', r'\|') \
               .replace('{', r'\{') \
               .replace('}', r'\}') \
               .replace('!', r'\!') \
               .replace('.', r'\.') \
               .replace('-', r'\-') 


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
def log_user_action(user_id, action, message_text):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logging.info(f"[{timestamp}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ '{action}': {message_text}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
def load_nomenclature():
    try:
        with open(NOMENCLATURE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–∞: {e}")
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã
def save_nomenclature(nomenclature):
    try:
        with open(NOMENCLATURE_FILE, 'w', encoding='utf-8') as f:
            json.dump(nomenclature, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update.effective_user.id, "/start", update.message.text)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π.\n\n"
        "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:\n"
        "/add [–ö–æ–¥] [–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ] ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é\n"
        "/list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π\n"
        "/delete [–ö–æ–¥] ‚Äì —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
        "/help ‚Äì –ø–æ–º–æ—â—å\n"
        "/import ‚Äì –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ .txt"
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äì –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É  
/add [–ö–æ–¥] [–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ] ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é  
/list ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π  
/delete [–ö–æ–¥] ‚Äì —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å  
/help ‚Äì —ç—Ç–∞ –ø–æ–º–æ—â—å  
/import ‚Äì –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ .txt  
"""
    await update.message.reply_text(help_text)
    log_user_action(update.effective_user.id, "help", update.message.text)

# –ö–æ–º–∞–Ω–¥–∞ /import
async def import_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update.effective_user.id, "import", update.message.text)
    await update.message.reply_text("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ .txt —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (.txt)
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document.file_name.endswith('.txt'):
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .txt")
        return
    new_file = await document.get_file()
    file_path = f"temp_{document.file_id}.txt"
    try:
        await new_file.download_to_drive(file_path)
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = [line.strip() for line in f if line.strip()]
        nomenclature = []
        for line in lines:
            parts = line.split(' ', 1)
            if len(parts) < 2:
                continue
            code, name = parts[0], parts[1]
            if code.isdigit():
                nomenclature.append({'code': code, 'name': name})
            else:
                logging.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–¥–æ–º: {line}")
        save_nomenclature(nomenclature)
        await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        try:
            os.remove(file_path)
        except:
            pass

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = update.message.text.strip().split(' ', 2)
    if len(parts) < 3 or parts[0] != '/add':
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add [–ö–æ–¥] [–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ]")
        return
    code = parts[1]
    name = parts[2]
    if not code.isdigit():
        await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return
    if len(code) < 5:
        await update.message.reply_text("‚ùå –ö–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    nomenclature = load_nomenclature()
    if any(item['code'] == code for item in nomenclature):
        await update.message.reply_text(f"‚ùå –ó–∞–ø–∏—Å—å —Å –∫–æ–¥–æ–º `{code}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    nomenclature.append({'code': code, 'name': name})
    save_nomenclature(nomenclature)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    log_user_action(update.effective_user.id, "add", update.message.text)

# –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 10 –∑–∞–ø–∏—Å–µ–π
async def list_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nomenclature = load_nomenclature()
    if not nomenclature:
        await update.message.reply_text("‚ùå –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞.")
        return
    message = "üìã –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π:\n\n"
    for item in nomenclature[:10]:
        message += (
            f"üîπ –ö–æ–¥: `{item['code']}`\n"
            f"üîπ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {escape_markdown(item['name'])}\n\n"
        )
        
    try:
        await update.message.reply_text(message, parse_mode='MarkdownV2')
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Markdown: {e}")
        await update.message.reply_text(message)
    log_user_action(update.effective_user.id, "list", update.message.text)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
async def delete_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parts = update.message.text.strip().split(' ')
    if len(parts) < 2 or parts[0] != '/delete':
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete [–ö–æ–¥]")
        return
    code_to_delete = parts[1]
    nomenclature = load_nomenclature()
    found = any(item['code'] == code_to_delete for item in nomenclature)
    new_nomenclature = [item for item in nomenclature if item['code'] != code_to_delete]
    if found:
        save_nomenclature(new_nomenclature)
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å —Å –∫–æ–¥–æ–º `{code_to_delete}` —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text(f"‚ùå –ó–∞–ø–∏—Å—å —Å –∫–æ–¥–æ–º `{code_to_delete}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    log_user_action(update.effective_user.id, "delete", update.message.text)

# –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É + –ø–∞–≥–∏–Ω–∞—Ü–∏—è
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    nomenclature = load_nomenclature()
    results = [
        item for item in nomenclature
        if query == item['code'] or query.lower() in item['name'].lower()
    ]
    if not results:
        await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    context.user_data['search_results'] = results
    context.user_data['page'] = 0
    await show_search_page(update.message, context, 0)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
async def show_search_page(message: Message, context: ContextTypes.DEFAULT_TYPE, page_index: int):
    results = context.user_data.get('search_results')
    total_pages = (len(results) + CHUNK_SIZE - 1) // CHUNK_SIZE
    current_page = page_index + 1
    chunk = results[page_index * CHUNK_SIZE : (page_index + 1) * CHUNK_SIZE]
    message_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}):\n"
    for item in chunk:
        message_text += (
            f"üîπ –ö–æ–¥: `{item['code']}`\n"
            f"üîπ –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {escape_markdown(item['name'])}\n\n"
        )
    keyboard = []
    if current_page > 1:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="prev")])
    if current_page < total_pages:
        keyboard.append([InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await message.edit_text(message_text, parse_mode='MarkdownV2', reply_markup=reply_markup)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await message.reply_text(message_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    page_index = context.user_data.get('page', 0)
    results = context.user_data.get('search_results', [])
    if data == "prev":
        page_index -= 1
    elif data == "next":
        page_index += 1
    context.user_data['page'] = page_index
    await show_search_page(query.message, context, page_index)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_action(update.effective_user.id, "unknown", update.message.text)
    await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏.")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
async def main():
    application = ApplicationBuilder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("import", import_command))
    application.add_handler(CommandHandler("list", list_items))
    application.add_handler(MessageHandler(filters.Regex(r'^/delete '), delete_item))
    application.add_handler(MessageHandler(filters.Regex(r'^/add '), add_item))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))
    application.add_handler(MessageHandler(filters.Document.TEXT, handle_document))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))
    # –ó–∞–ø—É—Å–∫
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    while True:
        await asyncio.sleep(1)

if __name__ == "__main__":
    asyncio.run(main())
import logging
import json
import os
from fastapi import FastAPI, Request
from telegram import Update
from telegram.constants import ParseMode 
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
    text = update.message.text.strip()
    
    nomen_dict = load_data()
    
    if not nomen_dict:
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª.")
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É
    if text.isdigit():
        code = text
        item = nomen_dict.get(code)
        if item:
            reply = (
                f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {item['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
                f"–ê—Ä—Ç–∏–∫—É–ª: {item['–∞—Ä—Ç–∏–∫—É–ª']}"
            )
        else:
            reply = "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await update.message.reply_text(reply)
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    matches = []
    for code, item in nomen_dict.items():
        if text.lower() in item['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].lower():
            matches.append({
                "–∫–æ–¥": code,
                "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": item['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
                "–∞—Ä—Ç–∏–∫—É–ª": item['–∞—Ä—Ç–∏–∫—É–ª']
            })

    if not matches:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
    for match in matches[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        response += (
            f"–ö–æ–¥: `{match['–∫–æ–¥']}`\n"
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {match['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
            f"–ê—Ä—Ç–∏–∫—É–ª: {match['–∞—Ä—Ç–∏–∫—É–ª']}\n\n"
        )

    await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN_V2)

# --- –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
app = FastAPI()

# --- –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ ---
application = None

@app.on_event("startup")
async def startup_event():
    global application
    token = '7119996029:AAGJn6MrE5bAb0MYbrQkG7C9e5-ugsAUwH4'  # –¢–æ–∫–µ–Ω –æ—Ç BotFather

    application = ApplicationBuilder().token(token).build()
    await application.initialize()  # üîß –í–ê–ñ–ù–û: –ù–µ –∑–∞–±—É–¥—å—Ç–µ —ç—Ç–æ!

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

@app.post("/webhook")
async def webhook(request: Request):
    logger.info("–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
    try:
        data = await request.json()
        logger.debug(f"–î–∞–Ω–Ω—ã–µ: {data}")
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return "", 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"error": str(e)}, 500

@app.get("/")
async def root():
    return {"status": "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"}
